import * as functions from '../src/TxModuleFactory';
import PluginPayload from '../src/transaction/PluginPayload';

test('ContractTxTest', () => {
    const txdata = {
        type: 1,
        gasAssetID: 0,
        gasPrice: 1000000000,
        gasLimit: 1000000,
        nonce: 0,
        from: 'testsender',
        to: 'testrecipient',
        assetID: 0,
        value: 1,
        data: '0x74657374207061796c6f6164',
        remark: 'test remark'
    };

    const chainID = 1;

    const privateKey = '9c22ff5f21f0b81b113e63f7db6da94fedef11b2119b4088b89664fb9a3cb658';

    let contractTx = functions.ContractTx(txdata, chainID);

    expect(contractTx.hash(false).toString('hex')).toStrictEqual(
        '898609654eaa4860b907e6d302640c1008ca5fc21804fc28bb07da15717b9221'
    );

    contractTx.sign(Buffer.from(privateKey, 'hex'));

    expect(contractTx.validate()).toStrictEqual('');

    expect(contractTx.hash(true).toString('hex')).toStrictEqual(
        'c2d855afec6c2a69861c4525969b01736d55f721d5d33d52f6f3bda4ecb7772e'
    );

    expect(contractTx.serialize().toString('hex')).toStrictEqual(
        'f88701f884e50180843b9aca00830f4240808a7465737473656e6465728d74657374726563697069656e7480018c74657374207061796c6f61648b746573742072656d61726bb8418511d15b86506b1d6b50f8cff905f837e9e8026908861df982e9a50f85d0c0e9481b0244b82d1b473f83f37f249800ebb28a938e21675113fe42e7ad0b5443af26'
    );
});

test('createAccount', () => {
    const account = 'gaiagaia45';
    const pubkey =
        '0x047db227d7094ce215c3a0f57e1bcc732551fe351f94249471934567e0f5dc1bf795962b8cccb87a2eb56b29fbe37d614e2f4c3c45b789ae4f1f51f4cb21972ffd';
    const desc = '创建账号{}!@#$%^&*()_+<>?|ADJ';

    let pPayload = new PluginPayload();

    expect(pPayload.createAccount(account, pubkey, desc)).toStrictEqual(
        '0x45948fde000000000000000000000000000000000000000000000000000000000000006000000000000000000000000000000000000000000000000000000000000000a00000000000000000000000000000000000000000000000000000000000000160000000000000000000000000000000000000000000000000000000000000000ae5889be5bbbae8b4a6e58fb77b7d21402324255e262a28295f2b3c3e3f7c41444a00000000000000000000000000000000000000000000000000000000000000'
    );
});

test('changePubKey', () => {
    const pubkey =
        '0x047db227d7094ce215c3a0f57e1bcc732551fe351f94249471934567e0f5dc1bf795962b8cccb87a2eb56b29fbe37d614e2f4c3c45b789ae4f1f51f4cb21972ffd';

    let pPayload = new PluginPayload();

    expect(pPayload.changePubKey(pubkey)).toStrictEqual(
        '0xcbcc624d0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000008430783034376462323237643730393463653231356333613066353765316263633733323535316665333531663934323439343731393334353637653066356463316266373935393632623863636362383761326562353662323966626533376436313465326634633363343562373839616534663166353166346362323139373266666400000000000000000000000000000000000000000000000000000000'
    );
});

test('transfer', () => {
    const to = 'testtest45';
    const assetID = 0;
    const value = '10000000000000000000000';

    let pPayload = new PluginPayload();

    expect(pPayload.transfer(to, assetID, value)).toStrictEqual(
        '0xbac58adf0000000000000000000000000000000000000000000000000000000000000060000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000021e19e0c9bab2400000000000000000000000000000000000000000000000000000000000000000000a7465737474657374343500000000000000000000000000000000000000000000'
    );
});

test('registerMiner', () => {
    const account = 'testtest45';

    let pPayload = new PluginPayload();

    expect(pPayload.registerMiner(account)).toStrictEqual(
        '0xd66da5900000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000a7465737474657374343500000000000000000000000000000000000000000000'
    );
});

test('unregisterMiner', () => {
    let pPayload = new PluginPayload();

    expect(pPayload.unregisterMiner()).toStrictEqual('0xcae9468c');
});
